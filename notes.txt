Ch 1: Building Blocks

-------------------------------------------------------------------------------
In terminal:

javac: compiles java files into .class bytecode

java: executes program

jar: packages files tg

javadoc: generates documentation

------------------------------------------------------------------------------
Fields & Methods

Fields - are basically variables

Methods - usually uses variables in order to execute a process

-------------------------------------------------------------------------------
Comments

1st Type: Single Line comment "//"

2nd Type: Multi-line comment "/* */"

3rd Type: Javadoc comment --> Likely won't be on exam, but the Format is as follows:
/*
 * Usually has a format that is followed here
 *
 */

-------------------------------------------------------------------------------
Classes and Source Files

- each source file can only have ONE public class, any other class is private

- the public class determines the name of the source file

-------------------------------------------------------------------------------
Main Method

syntax:

    public static void main(String[] args) {
        ...
    }

-------------------------------------------------------------------------------
Passing parameters to Java Program

In terminal:

1. cd to directory your source file is

2. javac the .java file to turn into bytecode

3. java [class_name] and param for the class

-------------------------------------------------------------------------------
Package Declarations & Imports

- must import the specific class everytime we want a specific class to be used

-------------------------------------------------------------------------------
Wildcards

- Classes in same package that are imported together, uses syntax of * at the end

-------------------------------------------------------------------------------
Creating New Packages

- create new package, and add classes wanted there

- if you want to access the classes in the package created above from another class in
  another package, then import that first package and class path!

-------------------------------------------------------------------------------
Compiling Bytecode to Another Directory

- when using javac on a specific .java file to compile the file to bytecode, the bytecode is directly sent to the same file as the source file

- in order to combat this issue, then use javac -d in order to create another file to store bytecode

-------------------------------------------------------------------------------
Important javac options

- javac -cp <classpath>  || Location of classes needed to compile the program

- javac -d <dir> || directory in which to place generated class files

Important java options

- java -cp || Location of classes needed to run the program

-------------------------------------------------------------------------------
Compiling JAR files (JavaARchive // Zip file consisting of mainly Java files)

syntax:

    java -cp "<classpath>" packageX.classY

-------------------------------------------------------------------------------
Creating a JAR file on Terminal

syntax:

    jar -cvf fileName.jar

    ^ cvf = create / verbose / file

In order to change directory where you want to create the JAR file, do:

    jar -cvf fileName.jar -C <dir>

-------------------------------------------------------------------------------
Order of precedence per Java File:

1. Comments / Header

2. Package

3. Imports

4. Class(es)

5. Fields / Methods

-------------------------------------------------------------------------------
Creating Objects

- Calling Constructors:

syntax:

    Park p = new Park();

    ^ Park() is a special method called a constructor which allows for the creation of a class object

-------------------------------------------------------------------------------
Reading and Writing Member Fields

- usually don't need to create a constructor for a java class, it is because of the default constructor created by java

- therefore, the only thing that is really needed is to instantiate the object in the main method, and set data fields set before the method after the object created

- then to set & read the variable, do objName.varName

-------------------------------------------------------------------------------
Executing Instance Initializer Blocks

- just check how many closed pairs of curly brackets there are

-------------------------------------------------------------------------------
Following the order of Initialization

- Fields and Blocks are read in 1st

- Then constructors

- Then main method

-------------------------------------------------------------------------------
Understanding Data Types

1. Primitive Types

- boolean

- byte

- short

- int

- long

- float

- double

- char

** String is not a primitive type

-------------------------------------------------------------------------------
Writing Literals

- need to understand the syntax per literal data type

Literals and the Underscore Char

- You can utilize underscore in place of commas in code

-------------------------------------------------------------------------------
Using Reference Types

- reference types are basically variables of a certain data type

e.g.

syntax:

    String numOfCats

-------------------------------------------------------------------------------
Difference between Primitive and Reference Types

- primitive types cannot have methods called upon them

- reference types can have methods called upon them

-------------------------------------------------------------------------------
Creating Wrapper Classes

- In order to create a wrapper class for a data type, write the reserved keyword
  for the datatype, but with a capital first letter

- This is useful in order to access the methods available directly under the wrapper class

-------------------------------------------------------------------------------
Defining Text Blocks

- There is specific syntax for text blocks

_ incidental v. essential whitespace

- there is also certain special characters obtainable through specific syntax

-------------------------------------------------------------------------------
Declaring variables

syntax:

    dataType varName = dataTypeValue;

-------------------------------------------------------------------------------
Identifying Identifiers

- There are a lot of rules regarding the naming of identifiers, aka Java var names

- Some words are simply reserved words in java and therefore we cannot set them as variable names

- Other names simply use certain special characters which cannot work in a var name

    e.g.
    - number to start a varName
    - other rules to come back to

-------------------------------------------------------------------------------
Declaring Multiple Variables

- For any given data type, if you wish to declare multiple varNames for the type, there MUST be:

    - comma between the varName (and initialization if there is one)
    - cannot repeat the data type after every comma, even if it's the same type
    - no different data types after commas
    - cannot have a varName without a data type to come before it

-------------------------------------------------------------------------------
Initializing Variables

1. Creating Local Variables

- Local variables are defined in a constructor, method, or initializer block

2. Uninitialized Local Variables

- uninitialized variables must be given a value before being utilized in another expression / calculation

-------------------------------------------------------------------------------
Passing Constructor and Method Parameters

- 


